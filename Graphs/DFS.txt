/*
        int n=fs.nextInt();
        ArrayList<ArrayList<Integer>> g=new ArrayList<>();
        for(int i=0;i<n;++i)
        {
            g.add(new ArrayList<>());
        }

        for(int[] e: edge)
        {
            int u=e[0], v=e[1];
            g.get(u).add(v);
            g.get(v).add(u);
        }
        boolean[] vis=new boolean[n];
        for(int i=0;i<n;++i)
        {
            if(!vis[i])
            {
                dfs(g, i, -1, vis);
            }
        }

    */
    static void dfs(ArrayList<ArrayList<Integer>> g, int u, int p, boolean[] vis)
    {
        if(vis[u]) // when graph is cyclic
        {
            return;
        }
        vis[u]=true;
        ArrayList<Integer> nbrs = g.get(u);
        for(int i=0;i<nbrs.size();++i)
        {
            int child=nbrs.get(i);
            if(child != p) // avoiding recursive call to the path I have come from
            {
                dfs(g, child, u, vis);
            }
        }
    }